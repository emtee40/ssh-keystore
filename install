#!/usr/bin/env bash
# coltondrg?'s ssh keystore
# Script to generate authorized_keys file
# This script is under the MIT License. You can do whatever you want with it!

{

function do_cd() {
	cd "$(dirname "$0")"
}

function build_vars() {
SCRIPT_REV="v12"
if [ "$INSTALL_FILE" = "" ]; then
INSTALL_FILE="$HOME/.ssh/authorized_keys"
fi
PROJECT_URL="https://git.drg.li/coltondrg/ssh-keystore"
SCRIPT_DOCUMENTATION="
coltondrg?'s ssh keystore $(git rev-parse --short HEAD) ($PROJECT_URL)
authorized_keys generation (install) script $SCRIPT_REV
Usage: ./install [options]
Available Options:
  -help		Print this help message and exit
  -auto		Don't confirm before overwriting authorized_keys
  -pull		Update to the latest commit before updating
  -cron		Same as -pull and -auto together. For use in cron jobs
  -file <file>	Specify the location of the authorized_keys file.
		Default is $HOME/.ssh/authorized_keys
Use \`git pull\` to update the keys & scripts
"
}

function get_options() {
	case $1 in
		-help|--help|help|-h|"-?"|-version|--version|version|-v)
			do_cd
			build_vars
			echo "$SCRIPT_DOCUMENTATION"
			exit 0
			;;
		-file|--file|file|-f)
			shift
			INSTALL_FILE="$(readlink -m "$1")"
			shift
			get_options "$@"
			;;
		-auto|--auto|auto|-a)
			OPT_NOCONFIRM="true"
			shift
			get_options "$@"
			;;
		-pull|--pull|pull|-p)
			OPT_DO_PULL="true"
			shift
			get_options "$@"
			;;
		-cron|--cron|cron|-c)
			OPT_NOCONFIRM="true"
			OPT_DO_PULL="true"
			shift
			get_options "$@"
			;;
		"")
			do_cd
			build_vars
			do_the_thing
			;;
		*)
			echo "Invalid option: $1"
			echo "Use \`./install -help\` to learn how to use the script or get version information."
			exit 1
			;;
	esac
}

function get_md5() {
	if [ $(command -v md5sum) ];then
		md5sum "$@"
	elif [ $(command -v openssl) ];then
		openssl md5 "$@"
	elif [ $(command -v md5) ];then
		md5 "$@"
	else
		echo "no_md5_err"
	fi
}

function do_the_thing() {
	if [ "$OPT_DO_PULL" = "true" ]; then
		SCRIPT_MD5=$(get_md5 install)
		git pull
		if [ "$SCRIPT_MD5" = "no_md5_err" ];then
			echo "Unable to verify the integrity of this script."
			if [ ! "$SCRIPT_RERUN" ];then
				export SCRIPT_RERUN=1
				"$0" "${ORIGINAL_ARGS[@]}"
				SCRIPT_EXIT=$?
				export SCRIPT_RERUN=""
				exit $SCRIPT_EXIT
			fi
		elif [ "$SCRIPT_MD5" != "$(get_md5 install)" ]; then
			echo "Script updated, re-running."
			"$0" "${ORIGINAL_ARGS[@]}"
			exit $?
		else
			echo "Script OK!"
		fi
	fi
	echo "coltondrg's ssh keystore authorized_keys generation script $SCRIPT_REV"
	echo "The keys from commit $(git rev-parse --short HEAD) will be used to generate an authorized_keys file"
	echo "The authorized_keys file generated will be placed at $INSTALL_FILE"
	echo "Note that the existing contents of $INSTALL_FILE will be destroyed."
	echo "For help on using this script, do \`./install -help\`"
	if [ "$OPT_NOCONFIRM" != "true" ]; then
		echo "If these are correct, press [Enter]. Press [Ctrl+C] to cancel."
		read _
	fi
	INSTALL_DIR=$(dirname "$INSTALL_FILE")
	if [ ! -d "$INSTALL_DIR" ];then
		echo "$INSTALL_DIR does not exist, creating it."
		mkdir -p "$INSTALL_DIR" || { echo "Failed to create $INSTALL_DIR."; exit 4; }
	fi
	touch "$INSTALL_FILE" || { echo "Unable to write to $INSTALL_FILE."; exit 2; }
	if [ ! -w "$INSTALL_FILE" ];then
		echo "Unable to write to $INSTALL_FILE."
		exit 2
	fi
	echo "# authorized_keys generated by coltondrg?'s ssh keystore install script $SCRIPT_REV ($PROJECT_URL)" > "$INSTALL_FILE"
	echo "# Generated from $(git config --get remote.origin.url) commit $(git rev-parse --short HEAD) on $(date -u +%Y/%m/%d\ %H:%M)" >> "$INSTALL_FILE"
	echo >> "$INSTALL_FILE"
	cat *.pub >> "$INSTALL_FILE"
	if [ -x "postinstall" ]; then
		echo "Executing postinstall script."
		export -f add_extra_key
		export -f add_mobile_key
		export -f add_comment
		export INSTALL_FILE="$INSTALL_FILE"
		"./postinstall" "${ORIGINAL_ARGS[@]}"
	fi
	echo "Process complete"
	exit 0
}

function add_extra_key() {
	if [ -f "extras/$1.pub" ];then
		cat "extras/$1.pub" >> "$INSTALL_FILE"
	fi
}

function add_mobile_key() {
	if [ -f "mobile/$1.pub" ];then
		cat "mobile/$1.pub" >> "$INSTALL_FILE"
	fi
}

function add_comment() {
	echo "$1" >> "$INSTALL_FILE"
}

ORIGINAL_ARGS=("$@")
get_options "$@"

}
